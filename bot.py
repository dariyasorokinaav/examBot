import telebot
from telebot import types
import random
import os

bot = telebot.TeleBot("8459722040:AAEq7pPAqOx_QRQc7vxtnXW0xhg-N7GGPqA")  # –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω —Å—é–¥–∞

# --- —Å–ª–æ–≤–∞—Ä–∏ –∑–∞–¥–∞–Ω–∏–π ---
tasks_oge = {1: "1. –û—Ü–µ–Ω–∫–∞ –æ–±—ä—ë–º–∞ –ø–∞–º—è—Ç–∏", 2: "2. –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
             3: "3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è", 4: "4. –ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–µ–π —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
             5: "5. –ê–Ω–∞–ª–∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∑–∞–¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", 6: "6. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å —É—Å–ª–æ–≤–Ω—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º",
             7: "7. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ —Å–µ—Ç–∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç", 8: "8. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ —Å–µ—Ç–∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç",
             9: "9. –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –≤ –≤–∏–¥–µ —Å—Ö–µ–º", 10: "10. –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —Å—á–∏—Å–ª–µ–Ω–∏—è",
             11: "11. –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–∞—Ö –∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ", 12: "12. –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏–µ–º",
             13: "13. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞", 14: "14. –ê–Ω–∞–ª–∏–∑ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü",
             15: "15. –ù–∞–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
             16: "16. –ù–∞–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º —è–∑—ã–∫–µ"}
tasks_ege = {1: "1. –ì—Ä–∞—Ñ—ã ‚Äì –º–∞—Ç—Ä–∏—Ü–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏", 2: "2. –ê–ª–≥–µ–±—Ä–∞ –ª–æ–≥–∏–∫–∏ ‚Äì —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç–∏",
             3: "3. –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", 4: "4. –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì —É—Å–ª–æ–≤–∏–µ –§–∞–Ω–æ",
             5: "5. –ê–ª–≥–æ—Ä–∏—Ç–º—ã ‚Äì –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ç–µ–π—à–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤", 6: "6. –ê–ª–≥–æ—Ä–∏—Ç–º—ã ‚Äì –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
             7: "7. –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì –ø–µ—Ä–µ–¥–∞—á–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", 8: "8. –ö–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞",
             9: "9. –†–∞–±–æ—Ç–∞ —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏", 10: "10. –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ",
             11: "11. –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
             12: "12. –ê–ª–≥–æ—Ä–∏—Ç–º—ã ‚Äì –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤", 13: "13. –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Å–µ—Ç–µ–π",
             14: "14. –°–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è", 15: "15. –ê–ª–≥–µ–±—Ä–∞ –ª–æ–≥–∏–∫–∏ ‚Äì –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π",
             16: "16. –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã", 17: "17. –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
             18: "18. –†–∞–±–æ—Ç–∞ —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏", 19: "19. –¢–µ–æ—Ä–∏—è –∏–≥—Ä", 20: "20. –¢–µ–æ—Ä–∏—è –∏–≥—Ä",
             21: "21. –¢–µ–æ—Ä–∏—è –∏–≥—Ä", 22: "22. –ú–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã", 23: "23. –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –∏ –≤–µ—Ç–≤–ª–µ–Ω–∏—è",
             24: "24. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", 25: "25. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
             26: "26. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", 27: "27. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"}

TASKS_PER_PAGE = 5  # —Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
# {chat_id: {"answer": str, "level": str, "task_id": str}}
active_training = {}


# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ----------
def get_tasks_dict(level: str) -> dict:
    """–í–µ—Ä–Ω—É—Ç—å —Å–ª–æ–≤–∞—Ä—å –∑–∞–¥–∞–Ω–∏–π –ø–æ —É—Ä–æ–≤–Ω—é"""
    return tasks_oge if level == "oge" else tasks_ege


def normalize(s: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É"""
    return s.strip().replace(",", ".").casefold()


def answers_equal(a: str, b: str) -> bool:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã: –∫–∞–∫ —á–∏—Å–ª–∞ –∏–ª–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏"""
    aa, bb = normalize(a), normalize(b)

    def to_float(x):
        try:
            return float(x)
        except:
            return None

    fa, fb = to_float(aa), to_float(bb)
    if fa is not None and fb is not None:
        return abs(fa - fb) < 1e-9
    return aa == bb


# ---------- –°–¢–ê–†–¢ ----------
@bot.message_handler(commands=['start'])
def choose_level(message):
    bot.send_message(message.chat.id, "–°–ï–ô–ß–ê–° –î–û–°–¢–£–ü–ù–û: —Ç–µ–æ—Ä–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—é 6 –ï–ì–≠ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è 1 –û–ì–≠")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û–ì–≠", callback_data="oge"))
    markup.add(types.InlineKeyboardButton("–ï–ì–≠", callback_data="ege"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "menu")
def back_to_menu(call):
    choose_level(call.message)


# ---------- –í–´–ë–û–† –î–ï–ô–°–¢–í–ò–Ø ----------
@bot.callback_query_handler(func=lambda call: call.data in ["oge", "ege"])
def choose_action(call):
    level = call.data
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–æ—Ä–∏–∏", callback_data=f"theory_{level}_1"))
    markup.add(types.InlineKeyboardButton("üß© –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data=f"training_{level}_1"))
    bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {level.upper()}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                     reply_markup=markup)


# ------ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø —Ä–∞–∑–º–µ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ------
def get_tasks_markup(list_prefix, item_prefix, level, tasks, page):
    markup = types.InlineKeyboardMarkup()
    start = (page - 1) * TASKS_PER_PAGE
    end = start + TASKS_PER_PAGE

    # –∫–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—á
    for i in list(tasks.keys())[start:end]:
        markup.add(types.InlineKeyboardButton(tasks[i], callback_data=f"{item_prefix}_{level}_{i}"))

    # –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–í–ù–ò–ú–ê–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º list_prefix)
    nav = []
    if page > 1:
        nav.append(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"{list_prefix}_{level}_{page-1}"))
    if end < len(tasks):
        nav.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°", callback_data=f"{list_prefix}_{level}_{page+1}"))
    if nav:
        markup.row(*nav)

    markup.add(types.InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="menu"))
    return markup


# --- –¢–ï–û–†–ò–Ø: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith("theory_"))
def show_theory_tasks(call):
    _, level, page = call.data.split("_")
    page = int(page)
    tasks = get_tasks_dict(level)
    # –±—ã–ª–æ: get_tasks_markup("theoryTask", ...)
    markup = get_tasks_markup("theory", "theoryTask", level, tasks, page)
    bot.edit_message_text(f"üìö –¢–µ–æ—Ä–∏—è –ø–æ {level.upper()}. –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}:",
                          chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data.startswith("theoryTask_"))
def send_theory_video(call):
    _, level, task_id = call.data.split("_")
    file_path = f"videos/{level}/{task_id}.mp4"
    try:
        with open(file_path, "rb") as video:
            bot.send_video(call.message.chat.id, video, timeout=600)
    except FileNotFoundError:
        bot.send_message(call.message.chat.id, f"‚è≥ –í–∏–¥–µ–æ –¥–ª—è {level.upper()} ‚Ññ{task_id} –µ—â—ë –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")


# --- –¢–†–ï–ù–ò–†–û–í–ö–ê: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith("training_"))
def show_training_tasks(call):
    _, level, page = call.data.split("_")
    page = int(page)
    tasks = get_tasks_dict(level)
    markup = get_tasks_markup("training", "trainingTask", level, tasks, page)
    bot.edit_message_text(f"üß© –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ {level.upper()}. –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}:",
                          chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          reply_markup=markup)



def ask_random_training_question(chat_id: int, level: str, task_id: str):
    file_path = f"training/{level}/{task_id}.txt"
    if not os.path.exists(file_path):
        bot.send_message(chat_id, f"‚è≥ –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è {level.upper()} ‚Ññ{task_id} –µ—â—ë –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
        return False

    with open(file_path, "r", encoding="utf-8") as f:
        lines = [line.strip() for line in f if line.strip()]
    data_lines = lines[1:] if len(lines) > 1 else []

    if not data_lines:
        bot.send_message(chat_id, f"‚ö†Ô∏è –í —Ñ–∞–π–ª–µ {file_path} –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.")
        return False

    random_line = random.choice(data_lines)
    parts = random_line.split(";", maxsplit=2)
    if len(parts) < 3:
        bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞:\n{random_line}")
        return False

    _, task_text, correct_answer = parts[0], parts[1], parts[2]
    active_training[chat_id] = {
        "answer": correct_answer.strip(),
        "level": level,
        "task_id": task_id
    }
    bot.send_message(chat_id,
                     f"üß© –ó–∞–¥–∞–Ω–∏–µ (‚Ññ{task_id}, {level.upper()}):\n{task_text}\n\n‚úç –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    return True


@bot.callback_query_handler(func=lambda call: call.data.startswith("trainingTask_"))
def start_training_question(call):
    _, level, task_id = call.data.split("_")
    ask_random_training_question(call.message.chat.id, level, task_id)


@bot.message_handler(func=lambda msg: msg.chat.id in active_training)
def check_training_answer(message):
    info = active_training[message.chat.id]
    correct = info["answer"]
    user_ans = message.text or ""

    if answers_equal(user_ans, correct):
        verdict = "‚úÖ –í–µ—Ä–Ω–æ!"
    else:
        verdict = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}"

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üé≤ –ï—â—ë –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"trainingTask_{info['level']}_{info['task_id']}"))
    markup.add(types.InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="menu"))

    bot.send_message(message.chat.id, f"{verdict}\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)

    del active_training[message.chat.id]


# ---------- –ó–ê–ü–£–°–ö ----------
bot.polling(none_stop=True)
